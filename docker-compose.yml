services:
  es01:
    container_name: "es01"
    image: "docker.elastic.co/elasticsearch/elasticsearch:${VERSION}"
    ports:
      - "9200:9200"                   # [docker host port]:[in container port]
      - "9201:9201"                   # [docker host port]:[in container port]
    environment:
      - node.name=kifarunix-demo-es
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es01/es01.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es01/es01.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - certs:$CERTS_DIR
    networks:
      - elastic
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    container_name: "Kibana"
    image: "docker.elastic.co/kibana/kibana:${VERSION}"
    depends_on: { "es01": { "condition": "service_healthy" } }
    ports:
      - "5601:5601"                   # [docker host port]:[in container port]
    environment:
      SERVERNAME: localhost
      ELASTICSEARCH_URL: https://es01:9200
      ELASTICSEARCH_HOSTS: https://es01:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: GRpvJoefkW2ReV08uG6M
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: $CERTS_DIR/ca/ca.crt
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEY: $CERTS_DIR/kibana01/kibana01.key
      SERVER_SSL_CERTIFICATE: $CERTS_DIR/kibana01/kibana01.crt
    volumes:
      - certs:$CERTS_DIR
    networks:
      - elastic

  indexer-server:
    container_name: "Spring-indexer"
    environment:

      elastic_host: es01              # the elastic host ip

      elastic_port: '9200'            # the elastic host port

      kibana_host: kibana             # the kibana host ip

      kibana_port: '5601'             # the kibana host port

      elastic_user: indexer           # the elastic username

      elastic_pass: indexer.1         # the elastic password

      river_index: 'eeardf'           # the name of the index where the rivers are created

      indexer_multithreading: 'true'  # if you want multithreading; each river will have a single thread

      threads: 4                      # in case of multithreading, the max number of concurrent working threads

      log_level: "info"               # the log level ( info or debug)

      cache_duration_in_seconds: 10   # number of second to cache dashboard data

    tty: true

    ports:
      - "8080:8080"                   # [docker host port]:[in container port]
    volumes:
      - indexerDB:/DB
      - certs:/certs
    networks:
      - elastic
    build: .

volumes:
  certs:
    driver: local
  indexerDB:
    driver: local

networks:
  elastic:
    driver: bridge